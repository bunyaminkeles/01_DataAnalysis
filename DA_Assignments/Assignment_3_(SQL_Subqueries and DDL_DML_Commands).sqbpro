<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="D:/GDrive_Fiji/ITF/SQL/chinook.db" readonly="0" foreign_keys="0" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3909"/><column_width id="4" width="0"/><expanded_item id="2" parent="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainalbums"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="albums" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="70"/><column index="2" value="300"/><column index="3" value="68"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="courses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="5" mode="1"/></sort><column_widths><column index="1" value="75"/><column index="2" value="143"/><column index="3" value="77"/><column index="4" value="77"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="92"/><column index="2" value="80"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="53"/><column index="8" value="96"/><column index="9" value="89"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="107"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="employees" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="91"/><column index="2" value="80"/><column index="3" value="80"/><column index="4" value="124"/><column index="5" value="84"/><column index="6" value="129"/><column index="7" value="129"/><column index="8" value="178"/><column index="9" value="67"/><column index="10" value="53"/><column index="11" value="69"/><column index="12" value="89"/><column index="13" value="115"/><column index="14" value="115"/><column index="15" value="168"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tracks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="65"/><column index="2" value="300"/><column index="3" value="70"/><column index="4" value="99"/><column index="5" value="68"/><column index="6" value="300"/><column index="7" value="93"/><column index="8" value="63"/><column index="9" value="74"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Single-Row Subqueries:--

--1. Write a query to find the maximum duration among the tracks. Your query should include TrackId, Name, Milliseconds
SELECT TrackId, Name, max(Milliseconds)
FROM tracks;

--2. Write a query to find the minimum duration among the tracks. Your query should include TrackId, Name, Milliseconds.
SELECT TrackId, Name, min(Milliseconds)
FROM tracks;

--3. Write a query to find the tracks whose bytes are higher than the average of the bytes of all tracks. 
-----Your query should include TrackId, Name, Bytes, general average and should be ordered by Bytes from highest to lowest. 
-----General average is the average of all tracks. General average should repeat in every row. 
-----(Hint: You need to use two subqueries)
SELECT TrackId, Name, Bytes, (SELECT avg(Bytes) FROM tracks) AS &quot; Average Bytes&quot;
FROM tracks
WHERE Bytes &gt; 
			(SELECT avg(Bytes) FROM tracks)
ORDER BY Bytes DESC; 

--Multiple-Row Subqueries:

--1. Write a query that returns the customers whose sales representatives are Jane Peacock and Margaret Park. 
-----Your query should include CustomerID, First Name and Last Name of the customers.
SELECT CustomerId, FirstName AS &quot;Customer FirstName&quot;, LastName AS &quot;Customer LastName&quot;
FROM customers
WHERE  SupportRepId IN
	(SELECT EmployeeId 
	FROM employees 
	WHERE (FirstName =&quot;Jane&quot; AND LastName =&quot;Peacock&quot;) OR (FirstName =&quot;Margaret&quot; AND LastName =&quot;Park&quot;)
	)
ORDER BY FirstName DESC;

--2. Rewrite the subquery above using the JOIN.
SELECT customers.CustomerId, customers.FirstName AS &quot;Customer FirstName&quot;, customers.LastName 
AS &quot;Customer LastName&quot;, employees.FirstName AS &quot;Sales_Res FirstName&quot;, employees.LastName AS &quot;Sales_Res LastName&quot;
FROM customers
INNER JOIN employees ON customers.SupportRepId = employees.EmployeeId
WHERE (employees.FirstName =&quot;Jane&quot; AND employees.LastName =&quot;Peacock&quot;) 
OR (employees.FirstName =&quot;Margaret&quot; AND employees.LastName =&quot;Park&quot;)
;

--DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements

--1. Create a table inside the chinook database. This table tracks the employees’ courses inside the organization. Your table should have the followings features:
    --Name of the table: courses
       --Columns:
           --CourseId (Primary Key)
           --CourseName (Cannot be null)
           --EmployeeId (Foreign Key - Refers to EmployeeId of employees table ) 
           --CoursePrice

CREATE TABLE courses
	   (CourseId INT Primary Key,
	    CourseName TEXT NOT NULL,
	    CoursePrice INT,
		EmployeeId INT,
		FOREIGN KEY (EmployeeId) REFERENCES employees (EmployeeId)); 
		
--2.
--Insert at least 5 rows into the courses table. 
--Your EmployeeId should contain the values of the EmployeeId column on the employees table. 
--You’re free to choose any values for other columns (CourseId, CourseName, CoursePrice)
		
INSERT INTO	courses (CourseId, CourseName, CoursePrice,EmployeeId )
VALUES (1, &quot;Work safety&quot;, 200, 3),
		(2, &quot;First aid&quot;, 300, 1),
		(3, &quot;Contact&quot;, 250, 2),
		(4, &quot;Sales Strategies&quot;, 350, 4),
		(5, &quot;Time management&quot;, 150, 5);

--3.
--Delete the last row of your courses table.
DELETE FROM courses
WHERE CourseId = (SELECT Max(CourseId) FROM courses);

--4.
--Add a new column to your courses table named StartDate. The new column cannot be null.
ALTER TABLE courses ADD StartDate DATE NOT NULL DEFAULT &quot;0&quot;;
--5.
--Delete the CoursePrice column.
ALTER TABLE courses
DROP COLUMN CoursePrice;


--6. Delete the courses table.
DROP TABLE courses;</sql><current_tab id="0"/></tab_sql></sqlb_project>
